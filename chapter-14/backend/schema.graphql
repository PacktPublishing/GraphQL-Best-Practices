interface Dated{
	createdAt: String!
	updatedAt: String!
}

interface Owned{
	user: User!
}

interface StringId{
	_id: String!
}

type User implements StringId & Dated{
	username: String!
	_id: String!
	createdAt: String!
	updatedAt: String!
}

type AuthPayload{
	token: String!
	user: User!
}

type PublicMutation{
	register(
		username: String!
		password: String!
	): AuthPayload!
	login(
		username: String!
		password: String!
	): AuthPayload!
}

type SalonProfile implements StringId & Owned & Dated{
	name: String!
	slug: String!
	_id: String!
	user: User!
	createdAt: String!
	updatedAt: String!
}

type SalonOps{
	createService(
		service: CreateService!
	): String
	serviceOps(
		_id: String!
	): ServiceOps
	update(
		salon: UpdateSalon!
	): RegisterResponse
	delete: Boolean
	createVisit(
		visit: CreateVisitFromAdmin!
	): String
	visitOps(
		_id: String!
	): VisitOps
}

input CreateSalon{
	name: String!
	slug: String!
}

input UpdateSalon{
	name: String
	slug: String
}

type SalonClient implements StringId & Dated{
	salon: SalonProfile!
	visits(
		filterDates: DateFilter!
		salonId: String
	): [Visit!]!
	_id: String!
	createdAt: String!
	updatedAt: String!
	client: Client!
	messageThread: MessageThread!
}

type Visit implements StringId & Dated{
	_id: String!
	createdAt: String!
	updatedAt: String!
	service: Service!
	status: VisitStatus!
	whenDateTime: String!
	client: SalonClient!
}

type SalonQuery{
	me: SalonProfile!
	clients: [SalonClient!]!
	visits(
		filterDates: DateFilter!
	): [Visit!]!
	services: [Service!]!
	analytics(
		filterDates: DateFilter!
	): SalonAnalytics
}

input DateFilter{
	from: String!
	to: String
}

type Service implements Dated & StringId{
	salon: SalonProfile!
	approximateDurationInMinutes: String!
	name: String!
	description: String!
	price: Int
	createdAt: String!
	updatedAt: String!
	_id: String!
}

input CreateService{
	approximateDurationInMinutes: String!
	name: String!
	description: String!
	price: Int
}

input UpdateService{
	approximateDurationInMinutes: String
	name: String
	description: String
	price: Int
}

type Query{
	salon: SalonQuery
	client: ClientQuery
}

schema{
	query: Query
	mutation: Mutation
}

type Mutation{
	salon: SalonOps
	public: PublicMutation
	user: UserOps
	client: ClientOps
}

type ServiceOps{
	delete: Boolean
	update(
		service: UpdateService!
	): Boolean
}

enum VisitStatus{
	CREATED
	CONFIRMED
	CANCELED
	RESCHEDULED
	COMPLETED
}

input CreateVisitFromClient{
	whenDateTime: String!
	serviceId: String!
}

input CreateVisitFromAdmin{
	whenDateTime: String!
	serviceId: String!
	userId: String!
}

input UpdateVisitFromAdmin{
	whenDateTime: String
	serviceId: String
	userId: String
}

type VisitOps{
	update(
		visit: UpdateVisitFromAdmin!
	): VisitResponse
	delete: Boolean
}

type SalonAnalytics{
	visitsPerDay: [AnalyticsAmountPerDate!]!
	cashPerDay: [AnalyticsAmountPerDate!]!
}

type AnalyticsAmountPerDate{
	date: String!
	amount: Int!
}

type ClientQuery{
	clients: [SalonClient!]!
	me: Client!
}

type UserOps{
	registerAsSalon(
		salon: CreateSalon!
	): RegisterResponse
	registerAsClient(
		client: CreateClient!
	): RegisterResponse
}

input CreateClient{
	firstName: String!
	lastName: String!
	email: String
	phone: String
}

input UpdateClient{
	firstName: String
	lastName: String
	email: String
	phone: String
}

type ClientOps{
	update(
		client: UpdateClient!
	): RegisterResponse
	createVisit(
		visit: CreateVisitFromClient!
	): VisitResponse
}

enum RegistrationError{
	EXISTS_WITH_SAME_NAME
	INVALID_SLUG
	INVALID_NAME
}

type RegisterResponse{
	errors: [RegistrationError!]!
}

enum VisitError{
	ALREADY_BOOKED
	INVALID_DATE
}

type VisitResponse{
	errors: [VisitError!]!
}

input MessageInput{
	message: String!
	salonId: String!
}

type Message implements Dated & StringId{
	createdAt: String!
	updatedAt: String!
	_id: String!
	sender: MessageSender!
}

union MessageSender = SalonClient | SalonProfile

type MessageThread implements StringId & Dated{
	salon: SalonProfile
	client: SalonClient
	messages: [Message!]!
	_id: String!
	createdAt: String!
	updatedAt: String!
}

type Client implements StringId & Dated{
	firstName: String!
	lastName: String!
	email: String
	phone: String
	user: User!
	_id: String!
	createdAt: String!
	updatedAt: String!
}
