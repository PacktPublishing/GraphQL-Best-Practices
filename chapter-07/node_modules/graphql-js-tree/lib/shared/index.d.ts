import { AllTypes, Directive, FieldType, OperationType, ParserField, TypeDefinition, TypeExtension } from "../Models";
export declare const getTypeName: (f: FieldType) => string;
export declare const compileType: (f: FieldType) => string;
export declare const decompileType: (typeName: string) => FieldType;
export declare const generateNodeId: (name: string, dataType: AllTypes, args: ParserField[]) => string;
type NodeCreation = Pick<ParserField, 'data' | 'name' | 'type'> & Partial<Omit<ParserField, 'data' | 'name' | 'type'>>;
type RootNodeCreation = Pick<ParserField, 'name'> & Partial<Omit<ParserField, 'data' | 'name' | 'type'>> & {
    type: TypeDefinition;
};
type ExtensionRootNodeCreation = Pick<ParserField, 'name'> & Partial<Omit<ParserField, 'data' | 'name' | 'type'>> & {
    type: TypeExtension;
};
export declare const createParserField: (props: NodeCreation) => ParserField;
export declare const createRootField: ({ name, type, ...props }: RootNodeCreation) => ParserField;
export declare const createRootExtensionField: ({ name, type, ...props }: ExtensionRootNodeCreation) => ParserField;
type DirectiveRootNodeCreation = Pick<ParserField, 'name'> & Partial<Omit<ParserField, 'data' | 'name' | 'type'>> & {
    directiveOptions?: Directive[];
};
export declare const createRootDirectiveField: ({ name, directiveOptions, ...props }: DirectiveRootNodeCreation) => ParserField;
type FieldCreation = Pick<ParserField, 'name'> & Partial<Omit<ParserField, 'data' | 'name' | 'type'>> & {
    type: string;
};
export declare const createPlainField: ({ name, type, ...props }: FieldCreation) => ParserField;
export declare const createTypeNameField: () => ParserField;
type InputValueCreation = Pick<ParserField, 'name'> & Partial<Omit<ParserField, 'data' | 'name' | 'type'>> & {
    type: string;
};
export declare const createPlainInputValue: ({ name, type, ...props }: InputValueCreation) => ParserField;
type EnumValueCreation = Pick<ParserField, 'name'> & Partial<Omit<ParserField, 'data' | 'name' | 'type'>>;
export declare const createPlainEnumValue: ({ name, ...props }: EnumValueCreation) => ParserField;
type UnionMemberCreation = Pick<ParserField, 'name'> & Partial<Omit<ParserField, 'data' | 'name' | 'type'>>;
export declare const createUnionMember: ({ name, ...props }: UnionMemberCreation) => ParserField;
type DirectiveInstanceCreation = Pick<ParserField, 'name'> & Partial<Omit<ParserField, 'data' | 'name' | 'type'>>;
export declare const createPlainDirectiveImplementation: ({ name, ...props }: DirectiveInstanceCreation) => ParserField;
type ArgumentCreation = Pick<ParserField, 'name'> & Partial<Omit<ParserField, 'data' | 'name' | 'type'>>;
export declare const createPlainArgument: ({ name, ...props }: ArgumentCreation) => ParserField;
export declare const compareParserFields: (f1: ParserField) => (f2: ParserField) => boolean;
type SchemaCreationProps = {
    operations?: {
        [OperationType.query]?: string;
        [OperationType.mutation]?: string;
        [OperationType.subscription]?: string;
    };
    directives?: ParserField[];
};
export declare const createSchemaDefinition: (options: SchemaCreationProps) => ParserField;
export declare const createSchemaExtension: (options: SchemaCreationProps) => ParserField;
export {};
