"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeDefinitionsTemplates = void 0;
const Models_1 = require("../../Models");
const TemplateUtils_1 = require("./TemplateUtils");
class TypeDefinitionsTemplates {
}
exports.TypeDefinitionsTemplates = TypeDefinitionsTemplates;
TypeDefinitionsTemplates.resolveExtension = ({ name, description, data, interfaces, args, directives, }) => TypeDefinitionsTemplates.extendedDefinitionTemplate({ name, description, data }) +
    `${TemplateUtils_1.TemplateUtils.resolveImplements(interfaces)}${TemplateUtils_1.TemplateUtils.resolveDirectives(directives)}${args && args.length ? `{\n${args.map((a) => TemplateUtils_1.TemplateUtils.resolverForConnection(a, 1)).join('\n')}\n}` : ''}`;
TypeDefinitionsTemplates.resolveUnionExtension = ({ name, description, data, interfaces, args, directives, }) => TypeDefinitionsTemplates.extendedDefinitionTemplate({ name, description, data }) +
    `${TemplateUtils_1.TemplateUtils.resolveImplements(interfaces)}${TemplateUtils_1.TemplateUtils.resolveDirectives(directives)}${args && args.length ? ` = ${args.map((a) => TemplateUtils_1.TemplateUtils.resolverForConnection(a, 1)).join(' | ')}` : ''}`;
TypeDefinitionsTemplates.extendedDefinitionTemplate = ({ description, name, data, }) => `${TemplateUtils_1.TemplateUtils.descriptionResolver(description)}extend ${Models_1.TypeDefinitionDisplayMap[data.type]} ${name}`;
TypeDefinitionsTemplates.definitionTemplate = ({ description, name, data, }) => `${TemplateUtils_1.TemplateUtils.descriptionResolver(description)}${Models_1.TypeDefinitionDisplayMap[data.type]} ${name}`;
TypeDefinitionsTemplates.resolve = ({ name, description, interfaces, args, directives, data }) => TypeDefinitionsTemplates.definitionTemplate({ name, description, data }) +
    `${TemplateUtils_1.TemplateUtils.resolveImplements(interfaces)}${TemplateUtils_1.TemplateUtils.resolveDirectives(directives)}${args && args.length ? `{\n${args.map((a) => TemplateUtils_1.TemplateUtils.resolverForConnection(a, 1)).join('\n')}\n}` : ''}`;
TypeDefinitionsTemplates.resolveDirective = ({ name, description, type, args }) => `${TemplateUtils_1.TemplateUtils.descriptionResolver(description)}${Models_1.TypeSystemDefinitionDisplayStrings.directive} @${name}${args && args.length ? `(\n${args.map((a) => TemplateUtils_1.TemplateUtils.resolverForConnection(a, 1)).join('\n')}\n)` : ''} on ${(type.directiveOptions || []).join(' | ')}`;
TypeDefinitionsTemplates.resolveUnion = ({ name, description, args, directives, data }) => TypeDefinitionsTemplates.definitionTemplate({ name, description, data }) +
    `${TemplateUtils_1.TemplateUtils.resolveDirectives(directives)}${args && args.length ? ` = ${args.map((a) => TemplateUtils_1.TemplateUtils.resolverForConnection(a)).join(' | ')}` : ''}`;
