import { ArgumentNode, DirectiveNode, FieldDefinitionNode, InputValueDefinitionNode, ObjectFieldNode, SchemaDefinitionNode, TypeDefinitionNode, TypeNode, TypeSystemDefinitionNode, TypeSystemExtensionNode, ValueNode } from 'graphql';
import { ParserField } from "../Models";
export declare class TypeResolver {
    static resolveSingleFieldType(n: TypeNode): ParserField['type']['fieldType'];
    static iterateObjectTypeFields(fields: ReadonlyArray<FieldDefinitionNode>): ParserField[];
    static resolveInputValueOptions: (value: ValueNode, name: string) => ParserField['type']['fieldType'];
    static resolveObjectField(f: ObjectFieldNode): ParserField[];
    static iterateDirectives(directives: ReadonlyArray<DirectiveNode>): ParserField[];
    static iterateArgumentFields(fields: ReadonlyArray<ArgumentNode>): ParserField[];
    static iterateInputValueFields(fields: ReadonlyArray<InputValueDefinitionNode>): ParserField[];
    static resolveInterfaces(n: TypeDefinitionNode): string[] | undefined;
    static resolveFields(n: TypeDefinitionNode): ParserField[] | undefined;
    static resolveFieldsFromDefinition(n: TypeSystemDefinitionNode | TypeSystemExtensionNode | SchemaDefinitionNode): ParserField[];
}
