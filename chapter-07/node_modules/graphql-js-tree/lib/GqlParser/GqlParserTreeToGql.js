"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.enrichGqlQueryWithAllVars = exports.enrichWholeTreeWithVars = exports.enrichFieldNodeWithVariables = exports.parseGqlTrees = exports.parseGqlTree = void 0;
const GqlParser_1 = require("./");
const valueNode_1 = require("./valueNode");
const Models_1 = require("../Models");
const shared_1 = require("../shared");
const graphql_1 = require("graphql");
const parseGqlTree = (mainTree) => {
    const generateName = (tree) => {
        if (tree.operation) {
            return `${tree.operation}${tree.name ? ` ${tree.name}` : ''}${generateVariableDefinitions(tree)}`;
        }
        if (tree.fragment) {
            return `fragment ${tree.name} on ${tree.node.name}`;
        }
        if (tree.fragmentSpread) {
            return `...${tree.name}`;
        }
        if (tree.inlineFragment) {
            return `...${tree.name ? ` on ${tree.name}` : ''}`;
        }
        return tree.name || '';
    };
    const generateChildren = (tree) => {
        var _a;
        return `${((_a = tree.children) === null || _a === void 0 ? void 0 : _a.length) ? `{\n ${tree.children.map(generateGql).join('\n ')}\n}` : ''}`;
    };
    const generateValue = (tree) => {
        return `${tree.value ? `: ${(0, valueNode_1.getValueAsGqlStringNode)(tree.value)}` : ''}`;
    };
    const generateArguments = (tree) => {
        var _a;
        return `${((_a = tree.arguments) === null || _a === void 0 ? void 0 : _a.length) ? `(\n ${tree.arguments.map((a) => generateGql(a)).join(', ')})` : ''}`;
    };
    const generateGql = (tree) => {
        return `${generateName(tree)}${generateValue(tree)}${generateArguments(tree)}${generateChildren(tree)}`;
    };
    const generateVariableDefinitions = (tree) => {
        var _a;
        return `${((_a = tree.variableDefinitions) === null || _a === void 0 ? void 0 : _a.length)
            ? `(${tree.variableDefinitions.map((tvd) => `$${tvd.name}: ${tvd.type}`).join(', ')})`
            : ''}`;
    };
    return generateGql(mainTree);
};
exports.parseGqlTree = parseGqlTree;
const parseGqlTrees = (trees) => {
    return trees.map(exports.parseGqlTree).join('\n');
};
exports.parseGqlTrees = parseGqlTrees;
const enrichFieldNodeWithVariables = (fieldTree, variableDefinitionsUpdate) => {
    if (fieldTree.node.data.type === Models_1.TypeSystemDefinition.FieldDefinition ||
        fieldTree.node.data.type === Models_1.Instances.Directive) {
        return Object.assign(Object.assign({}, fieldTree), (fieldTree.node.args.length
            ? {
                arguments: fieldTree.node.args.map((a) => {
                    const VarName = `${fieldTree.name}_${a.name}`;
                    const VarNode = {
                        name: a.name,
                        node: a,
                        value: {
                            kind: graphql_1.Kind.VARIABLE,
                            value: VarName,
                        },
                    };
                    variableDefinitionsUpdate((variableDefinitions) => [
                        ...variableDefinitions,
                        {
                            name: VarName,
                            type: (0, shared_1.compileType)(a.type.fieldType),
                        },
                    ]);
                    return VarNode;
                }),
            }
            : {}));
    }
    return fieldTree;
};
exports.enrichFieldNodeWithVariables = enrichFieldNodeWithVariables;
const enrichWholeTreeWithVars = (mainTree) => {
    let variableDefinitions = [];
    const recursiveEnrich = (tree) => {
        return (0, exports.enrichFieldNodeWithVariables)(Object.assign(Object.assign(Object.assign({}, tree), (tree.children
            ? {
                children: tree.children.map(recursiveEnrich),
            }
            : {})), (tree.directives
            ? {
                directives: tree.directives.map(recursiveEnrich),
            }
            : {})), (varsUpdate) => {
            variableDefinitions = varsUpdate(variableDefinitions);
        });
    };
    return Object.assign(Object.assign({}, recursiveEnrich(mainTree)), { variableDefinitions });
};
exports.enrichWholeTreeWithVars = enrichWholeTreeWithVars;
const enrichGqlQueryWithAllVars = (query, schema) => {
    const trees = (0, GqlParser_1.parseGql)(query, schema);
    return (0, exports.parseGqlTrees)(trees.map(exports.enrichWholeTreeWithVars));
};
exports.enrichGqlQueryWithAllVars = enrichGqlQueryWithAllVars;
