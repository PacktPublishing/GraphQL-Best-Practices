"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getValueWithoutLoc = exports.getValueAsGqlStringNode = void 0;
const graphql_1 = require("graphql");
const getValueAsGqlStringNode = (v) => {
    if (v.kind === 'ListValue') {
        return `[${v.values.map((vv) => (0, exports.getValueAsGqlStringNode)(vv)).join(', ')}]`;
    }
    if (v.kind === 'ObjectValue') {
        return `{\n ${v.fields.map((f) => `${f.name}: ${(0, exports.getValueAsGqlStringNode)(f.value)}`).join(', \n')} \n}`;
    }
    if (v.kind === 'Variable') {
        return '$' + v.value;
    }
    if (v.kind === 'NullValue') {
        return `null`;
    }
    if (v.kind === 'StringValue') {
        return `"${v.value}"`;
    }
    if (v.kind === 'FloatValue') {
        return v.value;
    }
    if (v.kind === 'IntValue') {
        return v.value;
    }
    if (v.kind === 'BooleanValue') {
        if (v.value)
            return 'true';
        return 'false';
    }
    return v.value;
};
exports.getValueAsGqlStringNode = getValueAsGqlStringNode;
const getValueWithoutLoc = (v) => {
    if (v.kind === 'ListValue') {
        return {
            kind: v.kind,
            values: v.values.map((vv) => (0, exports.getValueWithoutLoc)(vv)),
        };
    }
    if (v.kind === 'ObjectValue') {
        return {
            kind: v.kind,
            fields: v.fields.map((f) => ({
                kind: graphql_1.Kind.OBJECT_FIELD,
                name: f.name.value,
                value: (0, exports.getValueWithoutLoc)(f.value),
            })),
        };
    }
    if (v.kind === 'Variable') {
        return {
            kind: v.kind,
            value: v.name.value,
        };
    }
    if (v.kind === 'NullValue') {
        return {
            kind: v.kind,
            value: null,
        };
    }
    if (v.kind === 'BooleanValue') {
        return {
            kind: v.kind,
            value: v.value,
        };
    }
    return {
        kind: v.kind,
        value: v.value,
    };
};
exports.getValueWithoutLoc = getValueWithoutLoc;
