import { AllTypes, FieldType, Options, ParserField, ParserTree } from "../Models";
export declare function filterNotNull<T>(t: T | null): t is T;
export declare const changeTypeName: (field: FieldType, newName: string) => FieldType;
export declare const changeNodeOptions: (field: FieldType, newOption: Options) => FieldType;
export declare const resolveValueFieldType: (name: string, fType: FieldType, isRequired?: boolean, fn?: (str: string) => string) => string;
export declare const isExtensionNode: (t: AllTypes) => boolean;
export declare const regenerateId: (n: ParserField) => ParserField;
export declare const ChangeRelatedNode: ({ newName, node, oldName, }: {
    oldName: string;
    newName: string;
    node: ParserField;
}) => void;
export declare const ChangeAllRelatedNodes: ({ newName, nodes, oldName, }: {
    nodes: ParserField[];
    oldName: string;
    newName: string;
}) => void;
export declare const RemoveRelatedExtensionNodes: ({ node, tree }: {
    tree: ParserTree;
    node: ParserField;
}) => void;
export declare const isScalarArgument: (field: ParserField, scalarTypes: string[]) => boolean;
export declare const isArrayType: (f: FieldType) => boolean;
