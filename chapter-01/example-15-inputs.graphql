type Author{
  firstName: String!
  lastName: String!
  books: [Book!]!
  photoUrl: String
}

type Book {
  id: ID!
  title: String!
  author: [Author!]!
  genre: String!
  publicationYear: Int!
  isAvailable: Boolean!
  borrower: String
  dueDate: String
}

type Query {
  getAllBooks: [Book!]!
  getBookById(id: ID!): Book
  getAvailableBooks: [Book!]!
}

type Mutation {
  addBook(
    title: String!
    author: String!
    genre: String!
    publicationYear: Int!
  ): Book!
  updateBook(
    id: ID!
    title: String
    author: String
    genre: String
    publicationYear: Int
  ): Book!
  deleteBook(id: ID!): Book!
  lendBook(id: ID!, borrower: String!, dueDate: String!): Book!
  returnBook(id: ID!): Book!
}

schema {
  query: Query
  mutation: Mutation
}
type Author{
  firstName: String!
  lastName: String!
  books: [Book!]!
  photoUrl: String
}

type Book {
  id: ID!
  title: String!
  author: [Author!]!
  genre: String!
  publicationYear: Int!
  isAvailable: Boolean!
  borrower: String
  dueDate: String
}

type Query {
  getAllBooks: [Book!]!
  getBookById(id: ID!): Book
  getAvailableBooks: [Book!]!
}

type Mutation {
  addBook(
    book:CreateBook!
  ): Book!
  updateBook(
    id: ID!
    book: EditBook!
  ): Book!
  deleteBook(id: ID!): Book!
  lendBook(id: ID!, borrower: String!, dueDate: String!): Book!
  returnBook(id: ID!): Book!
}

input CreateBook{
    title: String!
    author: String!
    genre: String!
    publicationYear: Int!
}

input EditBook{
    title: String
    author: String
    genre: String
    publicationYear: Int
}

schema {
  query: Query
  mutation: Mutation
}
